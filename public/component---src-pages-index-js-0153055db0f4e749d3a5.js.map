{"version":3,"file":"component---src-pages-index-js-0153055db0f4e749d3a5.js","mappings":"sTAkBqBA,EAAAA,SAAAA,GAEnB,WAAYC,GAAS,IAAD,EAClB,cAAMA,IAAN,KAEA,IAAMC,EAAWC,EAAAA,KAHC,OAIlBC,QAAQC,IAAR,qCAAiDH,GACjD,EAAKI,MAAQ,CACXC,cAA8B,OAAbL,GAAyC,KAApBA,EAASM,OAC/CN,SAAWA,GAIb,EAAKO,KAAOR,EAAQQ,KAXF,GAFDT,EAAAA,EAAAA,GAAAA,EAAAA,GAclB,kBAoEA,OApEA,EAEDU,iBAAA,WAEEN,QAAQC,IAAI,sBAGgB,OAAxBM,KAAKL,MAAMJ,UAAoD,KAA/BS,KAAKL,MAAMJ,SAASM,SAEtDJ,QAAQC,IAAR,uCAAmDM,KAAKL,MAAMJ,UAG9DS,KAAKC,SAAS,CAACL,eAAc,IAI7BJ,EAAAA,GAAuBQ,KAAKL,MAAMJ,YAGrC,EAEDW,OAAA,WAAS,IAAD,OACAC,GAAMC,EAAAA,EAAAA,GAASJ,KAAKF,KAAKO,SAE/B,OADAZ,QAAQC,IAAIM,KAAKF,MAErB,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAKQ,MAAM,SACX,uBAAKC,MAAM,kBACT,gBAAC,IAAD,CAAQC,KAAMR,KAAKL,MAAMC,cAAea,SAAS,KAAKC,WAAW,EAC7DC,sBAAsB,GACtB,gBAAC,IAAD,kDACA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAWC,MAAM,sBAAsBF,WAAS,EAACG,QAAQ,WAAWC,UAAU,EAAMC,aAAa,GAC/FC,SAAW,SAACC,GAAD,OAAa,EAAKhB,SAAS,CAAEV,SAAU0B,EAAQC,OAAOC,YAErE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAQC,QAASpB,KAAKD,iBAAiBsB,KAAKrB,MAAOsB,MAAM,UAAUT,QAAQ,YAA3E,UAGJ,0BAAKb,KAAKF,KAAKyB,KAAKC,aAAaC,aACjC,0BAAKzB,KAAKF,KAAKyB,KAAKC,aAAaE,QACrC,gBAAC,EAAAC,EAAD,CACEC,IAAI,uBACJC,OAAQ,IACRC,MAAO,IACPC,QAAS,GACTC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,qBACJC,MAAO,CAAEC,aAAa,WAPxB,sBASA,2BACA,gBAAC,EAAAC,EAAD,CAAajC,MAAOA,EAAO8B,IAAKjC,KAAKF,KAAKyB,KAAKC,aAAaE,SAC5D,2BACC1B,KAAKF,KAAKuC,kBAAkBC,MAAMC,KAAI,SAACC,EAAQC,GAE1C,OACE,uBAAKC,IAAKD,EAASE,UAAU,eAEvB,gBAAC,EAAAC,KAAD,CAAMC,GAAIL,EAAOM,KAAKC,YAAYC,MAAOR,EAAOM,KAAKC,YAAYzC,cAUhF,EAlFkBjB,CAAkB4D,EAAAA,Y","sources":["webpack://gatsby-starter-default/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\nimport { StaticImage ,GatsbyImage,getImage} from \"gatsby-plugin-image\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { Link } from \"gatsby\"\nimport './index.css'\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { graphql } from \"gatsby\"\nimport * as StorageManager from \"../StorageManager.js\";\n\n\nexport default class IndexPage extends React.Component{\n\n  constructor(inProps){\n    super(inProps);\n    // Attach state, and determine if the dialog is shown based on whether we have a username in localStorage.\n    const username = StorageManager.getName();\n    console.log(`IndexPage.constructor(): username=${username}`);\n    this.state = {\n      dialogVisible : (username === null || username.trim() === \"\"),\n      username : username\n    };\n\n    // Capture the data passed in.\n    this.data = inProps.data;\n  }\n\n  handleDialogSave() {\n\n    console.log(\"handleDialogSave()\");\n\n    // Only react to the button click if they actually entered something.\n    if (this.state.username !== null && this.state.username.trim() !== \"\") {\n\n      console.log(`handleDialogSave(): Saving username=${this.state.username}`);\n\n      // First things first: close the dialog.\n      this.setState({dialogVisible:false});\n\n      // Finally, store the username.\n      //localStorage.setItem(\"username\", this.state.username);\n      StorageManager.setName(this.state.username);\n\n    }\n  }\n\n  render(){\n    const image=getImage(this.data.divider);\n    console.log(this.data);\n    return(\n<Layout>\n    <Seo title=\"Home\" />\n    <div class=\"outerContainer\">\n      <Dialog open={this.state.dialogVisible} maxWidth=\"sm\" fullWidth={true}\n          disableEscapeKeyDown={true}>\n          <DialogTitle>You need a username to use Markdown Board</DialogTitle>\n          <DialogContent>\n            <TextField label=\"Enter username here\" fullWidth variant=\"outlined\" required={true} defaultValue=\"\"\n              onChange={ (inEvent) => this.setState({ username: inEvent.target.value }) } />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleDialogSave.bind(this)} color=\"primary\" variant=\"outlined\">Save</Button>\n          </DialogActions>\n        </Dialog>\n        <h2>{this.data.site.siteMetadata.description}</h2>\n        <h3>{this.data.site.siteMetadata.author}</h3>\n    <StaticImage\n      src=\"../images/splash.png\"\n      height={296}\n      width={420}\n      quality={95}\n      formats={[\"auto\", \"webp\", \"avif\"]}\n      alt=\"A Gatsby astronaut\"\n      style={{ marginBottom: `1.45rem` }}\n    />\n    <br/>\n    <GatsbyImage image={image} alt={this.data.site.siteMetadata.author}/>\n    <br/>\n    {this.data.allMarkdownRemark.edges.map((inItem, inIndex) => {\n          //noinspection JSUnresolvedVariable\n          return (\n            <div key={inIndex} className=\"documentDiv\">\n              \n                  <Link to={inItem.node.frontmatter.slug}>{inItem.node.frontmatter.title}</Link>\n            </div>\n          );\n        })}\n\n    </div>\n    \n    \n  </Layout>\n    );\n  }\n}\n\nexport const pageQuery=graphql`\nquery{\n divider:file(relativePath:{eq: \"divider.png\"}){\n   childImageSharp{\n     gatsbyImageData(\n       layout:FIXED\n       width:600\n       height:25\n       )\n   }\n }\n site{\n   siteMetadata{\n     title\n     description\n     author\n   }\n }\n allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }){\n  edges{\n    node{\n      id\n      frontmatter{\n        title\n        slug\n      }\n\n    }\n  }\n}\n}\n`"],"names":["IndexPage","inProps","username","StorageManager","console","log","state","dialogVisible","trim","data","handleDialogSave","this","setState","render","image","getImage","divider","title","class","open","maxWidth","fullWidth","disableEscapeKeyDown","label","variant","required","defaultValue","onChange","inEvent","target","value","onClick","bind","color","site","siteMetadata","description","author","S","src","height","width","quality","formats","alt","style","marginBottom","G","allMarkdownRemark","edges","map","inItem","inIndex","key","className","Link","to","node","frontmatter","slug","React"],"sourceRoot":""}